// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "gitlab.ozon.dev/timofey15g/homework/pkg/service"
	grpc "google.golang.org/grpc"
)

// MockOrderServiceClient is a mock of OrderServiceClient interface.
type MockOrderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceClientMockRecorder
}

// MockOrderServiceClientMockRecorder is the mock recorder for MockOrderServiceClient.
type MockOrderServiceClientMockRecorder struct {
	mock *MockOrderServiceClient
}

// NewMockOrderServiceClient creates a new mock instance.
func NewMockOrderServiceClient(ctrl *gomock.Controller) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceClient) EXPECT() *MockOrderServiceClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceClient) CreateOrder(ctx context.Context, in *service.TReqAcceptOrder, opts ...grpc.CallOption) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceClientMockRecorder) CreateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).CreateOrder), varargs...)
}

// IssueOrder mocks base method.
func (m *MockOrderServiceClient) IssueOrder(ctx context.Context, in *service.TReqIssueOrder, opts ...grpc.CallOption) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueOrder", varargs...)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueOrder indicates an expected call of IssueOrder.
func (mr *MockOrderServiceClientMockRecorder) IssueOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).IssueOrder), varargs...)
}

// ListHistory mocks base method.
func (m *MockOrderServiceClient) ListHistory(ctx context.Context, in *service.TReqListHistory, opts ...grpc.CallOption) (*service.TListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHistory", varargs...)
	ret0, _ := ret[0].(*service.TListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistory indicates an expected call of ListHistory.
func (mr *MockOrderServiceClientMockRecorder) ListHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistory", reflect.TypeOf((*MockOrderServiceClient)(nil).ListHistory), varargs...)
}

// ListOrders mocks base method.
func (m *MockOrderServiceClient) ListOrders(ctx context.Context, in *service.TReqListOrders, opts ...grpc.CallOption) (*service.TListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrders", varargs...)
	ret0, _ := ret[0].(*service.TListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderServiceClientMockRecorder) ListOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderServiceClient)(nil).ListOrders), varargs...)
}

// ListReturns mocks base method.
func (m *MockOrderServiceClient) ListReturns(ctx context.Context, in *service.TReqListReturns, opts ...grpc.CallOption) (*service.TListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReturns", varargs...)
	ret0, _ := ret[0].(*service.TListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReturns indicates an expected call of ListReturns.
func (mr *MockOrderServiceClientMockRecorder) ListReturns(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReturns", reflect.TypeOf((*MockOrderServiceClient)(nil).ListReturns), varargs...)
}

// RenewTask mocks base method.
func (m *MockOrderServiceClient) RenewTask(ctx context.Context, in *service.TReqRenewTask, opts ...grpc.CallOption) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenewTask", varargs...)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewTask indicates an expected call of RenewTask.
func (mr *MockOrderServiceClientMockRecorder) RenewTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewTask", reflect.TypeOf((*MockOrderServiceClient)(nil).RenewTask), varargs...)
}

// ReturnOrder mocks base method.
func (m *MockOrderServiceClient) ReturnOrder(ctx context.Context, in *service.TReqReturnOrder, opts ...grpc.CallOption) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReturnOrder", varargs...)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderServiceClientMockRecorder) ReturnOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).ReturnOrder), varargs...)
}

// WithdrawOrder mocks base method.
func (m *MockOrderServiceClient) WithdrawOrder(ctx context.Context, in *service.TReqWithdrawOrder, opts ...grpc.CallOption) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithdrawOrder", varargs...)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawOrder indicates an expected call of WithdrawOrder.
func (mr *MockOrderServiceClientMockRecorder) WithdrawOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).WithdrawOrder), varargs...)
}

// MockOrderServiceServer is a mock of OrderServiceServer interface.
type MockOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceServerMockRecorder
}

// MockOrderServiceServerMockRecorder is the mock recorder for MockOrderServiceServer.
type MockOrderServiceServerMockRecorder struct {
	mock *MockOrderServiceServer
}

// NewMockOrderServiceServer creates a new mock instance.
func NewMockOrderServiceServer(ctrl *gomock.Controller) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceServer) EXPECT() *MockOrderServiceServerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceServer) CreateOrder(arg0 context.Context, arg1 *service.TReqAcceptOrder) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceServerMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).CreateOrder), arg0, arg1)
}

// IssueOrder mocks base method.
func (m *MockOrderServiceServer) IssueOrder(arg0 context.Context, arg1 *service.TReqIssueOrder) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueOrder", arg0, arg1)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueOrder indicates an expected call of IssueOrder.
func (mr *MockOrderServiceServerMockRecorder) IssueOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).IssueOrder), arg0, arg1)
}

// ListHistory mocks base method.
func (m *MockOrderServiceServer) ListHistory(arg0 context.Context, arg1 *service.TReqListHistory) (*service.TListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHistory", arg0, arg1)
	ret0, _ := ret[0].(*service.TListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistory indicates an expected call of ListHistory.
func (mr *MockOrderServiceServerMockRecorder) ListHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistory", reflect.TypeOf((*MockOrderServiceServer)(nil).ListHistory), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockOrderServiceServer) ListOrders(arg0 context.Context, arg1 *service.TReqListOrders) (*service.TListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].(*service.TListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderServiceServerMockRecorder) ListOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderServiceServer)(nil).ListOrders), arg0, arg1)
}

// ListReturns mocks base method.
func (m *MockOrderServiceServer) ListReturns(arg0 context.Context, arg1 *service.TReqListReturns) (*service.TListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReturns", arg0, arg1)
	ret0, _ := ret[0].(*service.TListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReturns indicates an expected call of ListReturns.
func (mr *MockOrderServiceServerMockRecorder) ListReturns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReturns", reflect.TypeOf((*MockOrderServiceServer)(nil).ListReturns), arg0, arg1)
}

// RenewTask mocks base method.
func (m *MockOrderServiceServer) RenewTask(arg0 context.Context, arg1 *service.TReqRenewTask) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewTask", arg0, arg1)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewTask indicates an expected call of RenewTask.
func (mr *MockOrderServiceServerMockRecorder) RenewTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewTask", reflect.TypeOf((*MockOrderServiceServer)(nil).RenewTask), arg0, arg1)
}

// ReturnOrder mocks base method.
func (m *MockOrderServiceServer) ReturnOrder(arg0 context.Context, arg1 *service.TReqReturnOrder) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", arg0, arg1)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderServiceServerMockRecorder) ReturnOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).ReturnOrder), arg0, arg1)
}

// WithdrawOrder mocks base method.
func (m *MockOrderServiceServer) WithdrawOrder(arg0 context.Context, arg1 *service.TReqWithdrawOrder) (*service.TStringResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawOrder", arg0, arg1)
	ret0, _ := ret[0].(*service.TStringResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawOrder indicates an expected call of WithdrawOrder.
func (mr *MockOrderServiceServerMockRecorder) WithdrawOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).WithdrawOrder), arg0, arg1)
}

// mustEmbedUnimplementedOrderServiceServer mocks base method.
func (m *MockOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServiceServer")
}

// mustEmbedUnimplementedOrderServiceServer indicates an expected call of mustEmbedUnimplementedOrderServiceServer.
func (mr *MockOrderServiceServerMockRecorder) mustEmbedUnimplementedOrderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServiceServer", reflect.TypeOf((*MockOrderServiceServer)(nil).mustEmbedUnimplementedOrderServiceServer))
}

// MockUnsafeOrderServiceServer is a mock of UnsafeOrderServiceServer interface.
type MockUnsafeOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrderServiceServerMockRecorder
}

// MockUnsafeOrderServiceServerMockRecorder is the mock recorder for MockUnsafeOrderServiceServer.
type MockUnsafeOrderServiceServerMockRecorder struct {
	mock *MockUnsafeOrderServiceServer
}

// NewMockUnsafeOrderServiceServer creates a new mock instance.
func NewMockUnsafeOrderServiceServer(ctrl *gomock.Controller) *MockUnsafeOrderServiceServer {
	mock := &MockUnsafeOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrderServiceServer) EXPECT() *MockUnsafeOrderServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrderServiceServer mocks base method.
func (m *MockUnsafeOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServiceServer")
}

// mustEmbedUnimplementedOrderServiceServer indicates an expected call of mustEmbedUnimplementedOrderServiceServer.
func (mr *MockUnsafeOrderServiceServerMockRecorder) mustEmbedUnimplementedOrderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServiceServer", reflect.TypeOf((*MockUnsafeOrderServiceServer)(nil).mustEmbedUnimplementedOrderServiceServer))
}
