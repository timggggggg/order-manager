// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/app.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/timofey15g/homework/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockStorage) CreateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStorageMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStorage)(nil).CreateOrder), ctx, order)
}

// GetAll mocks base method.
func (m *MockStorage) GetAll(ctx context.Context, limit, offset int64) (models.OrdersSliceStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, offset)
	ret0, _ := ret[0].(models.OrdersSliceStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorageMockRecorder) GetAll(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorage)(nil).GetAll), ctx, limit, offset)
}

// GetByUserIDCursorPagination mocks base method.
func (m *MockStorage) GetByUserIDCursorPagination(ctx context.Context, userID, limit, cursorID int64) (models.OrdersSliceStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDCursorPagination", ctx, userID, limit, cursorID)
	ret0, _ := ret[0].(models.OrdersSliceStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDCursorPagination indicates an expected call of GetByUserIDCursorPagination.
func (mr *MockStorageMockRecorder) GetByUserIDCursorPagination(ctx, userID, limit, cursorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDCursorPagination", reflect.TypeOf((*MockStorage)(nil).GetByUserIDCursorPagination), ctx, userID, limit, cursorID)
}

// GetReturnsLimitOffsetPagination mocks base method.
func (m *MockStorage) GetReturnsLimitOffsetPagination(ctx context.Context, limit, offset int64) (models.OrdersSliceStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReturnsLimitOffsetPagination", ctx, limit, offset)
	ret0, _ := ret[0].(models.OrdersSliceStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReturnsLimitOffsetPagination indicates an expected call of GetReturnsLimitOffsetPagination.
func (mr *MockStorageMockRecorder) GetReturnsLimitOffsetPagination(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReturnsLimitOffsetPagination", reflect.TypeOf((*MockStorage)(nil).GetReturnsLimitOffsetPagination), ctx, limit, offset)
}

// IssueOrders mocks base method.
func (m *MockStorage) IssueOrders(ctx context.Context, ids []int64) (models.OrdersSliceStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueOrders", ctx, ids)
	ret0, _ := ret[0].(models.OrdersSliceStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueOrders indicates an expected call of IssueOrders.
func (mr *MockStorageMockRecorder) IssueOrders(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOrders", reflect.TypeOf((*MockStorage)(nil).IssueOrders), ctx, ids)
}

// ReturnOrder mocks base method.
func (m *MockStorage) ReturnOrder(ctx context.Context, orderID, userID int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", ctx, orderID, userID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockStorageMockRecorder) ReturnOrder(ctx, orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockStorage)(nil).ReturnOrder), ctx, orderID, userID)
}

// WithdrawOrder mocks base method.
func (m *MockStorage) WithdrawOrder(ctx context.Context, id int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawOrder", ctx, id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawOrder indicates an expected call of WithdrawOrder.
func (mr *MockStorageMockRecorder) WithdrawOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawOrder", reflect.TypeOf((*MockStorage)(nil).WithdrawOrder), ctx, id)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockHandler) Execute(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", w, r)
}

// Execute indicates an expected call of Execute.
func (mr *MockHandlerMockRecorder) Execute(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockHandler)(nil).Execute), w, r)
}
