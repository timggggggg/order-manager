// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateOrder_FullMethodName   = "/NService.OrderService/CreateOrder"
	OrderService_IssueOrder_FullMethodName    = "/NService.OrderService/IssueOrder"
	OrderService_ListHistory_FullMethodName   = "/NService.OrderService/ListHistory"
	OrderService_ListOrders_FullMethodName    = "/NService.OrderService/ListOrders"
	OrderService_ListReturns_FullMethodName   = "/NService.OrderService/ListReturns"
	OrderService_ReturnOrder_FullMethodName   = "/NService.OrderService/ReturnOrder"
	OrderService_WithdrawOrder_FullMethodName = "/NService.OrderService/WithdrawOrder"
	OrderService_RenewTask_FullMethodName     = "/NService.OrderService/RenewTask"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *TReqAcceptOrder, opts ...grpc.CallOption) (*TStringResp, error)
	IssueOrder(ctx context.Context, in *TReqIssueOrder, opts ...grpc.CallOption) (*TStringResp, error)
	ListHistory(ctx context.Context, in *TReqListHistory, opts ...grpc.CallOption) (*TListResp, error)
	ListOrders(ctx context.Context, in *TReqListOrders, opts ...grpc.CallOption) (*TListResp, error)
	ListReturns(ctx context.Context, in *TReqListReturns, opts ...grpc.CallOption) (*TListResp, error)
	ReturnOrder(ctx context.Context, in *TReqReturnOrder, opts ...grpc.CallOption) (*TStringResp, error)
	WithdrawOrder(ctx context.Context, in *TReqWithdrawOrder, opts ...grpc.CallOption) (*TStringResp, error)
	RenewTask(ctx context.Context, in *TReqRenewTask, opts ...grpc.CallOption) (*TStringResp, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *TReqAcceptOrder, opts ...grpc.CallOption) (*TStringResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TStringResp)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) IssueOrder(ctx context.Context, in *TReqIssueOrder, opts ...grpc.CallOption) (*TStringResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TStringResp)
	err := c.cc.Invoke(ctx, OrderService_IssueOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListHistory(ctx context.Context, in *TReqListHistory, opts ...grpc.CallOption) (*TListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TListResp)
	err := c.cc.Invoke(ctx, OrderService_ListHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListOrders(ctx context.Context, in *TReqListOrders, opts ...grpc.CallOption) (*TListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TListResp)
	err := c.cc.Invoke(ctx, OrderService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListReturns(ctx context.Context, in *TReqListReturns, opts ...grpc.CallOption) (*TListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TListResp)
	err := c.cc.Invoke(ctx, OrderService_ListReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ReturnOrder(ctx context.Context, in *TReqReturnOrder, opts ...grpc.CallOption) (*TStringResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TStringResp)
	err := c.cc.Invoke(ctx, OrderService_ReturnOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) WithdrawOrder(ctx context.Context, in *TReqWithdrawOrder, opts ...grpc.CallOption) (*TStringResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TStringResp)
	err := c.cc.Invoke(ctx, OrderService_WithdrawOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RenewTask(ctx context.Context, in *TReqRenewTask, opts ...grpc.CallOption) (*TStringResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TStringResp)
	err := c.cc.Invoke(ctx, OrderService_RenewTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	CreateOrder(context.Context, *TReqAcceptOrder) (*TStringResp, error)
	IssueOrder(context.Context, *TReqIssueOrder) (*TStringResp, error)
	ListHistory(context.Context, *TReqListHistory) (*TListResp, error)
	ListOrders(context.Context, *TReqListOrders) (*TListResp, error)
	ListReturns(context.Context, *TReqListReturns) (*TListResp, error)
	ReturnOrder(context.Context, *TReqReturnOrder) (*TStringResp, error)
	WithdrawOrder(context.Context, *TReqWithdrawOrder) (*TStringResp, error)
	RenewTask(context.Context, *TReqRenewTask) (*TStringResp, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *TReqAcceptOrder) (*TStringResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) IssueOrder(context.Context, *TReqIssueOrder) (*TStringResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueOrder not implemented")
}
func (UnimplementedOrderServiceServer) ListHistory(context.Context, *TReqListHistory) (*TListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistory not implemented")
}
func (UnimplementedOrderServiceServer) ListOrders(context.Context, *TReqListOrders) (*TListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedOrderServiceServer) ListReturns(context.Context, *TReqListReturns) (*TListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReturns not implemented")
}
func (UnimplementedOrderServiceServer) ReturnOrder(context.Context, *TReqReturnOrder) (*TStringResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrder not implemented")
}
func (UnimplementedOrderServiceServer) WithdrawOrder(context.Context, *TReqWithdrawOrder) (*TStringResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawOrder not implemented")
}
func (UnimplementedOrderServiceServer) RenewTask(context.Context, *TReqRenewTask) (*TStringResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewTask not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqAcceptOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*TReqAcceptOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_IssueOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqIssueOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).IssueOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_IssueOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).IssueOrder(ctx, req.(*TReqIssueOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqListHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListHistory(ctx, req.(*TReqListHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqListOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListOrders(ctx, req.(*TReqListOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqListReturns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListReturns(ctx, req.(*TReqListReturns))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqReturnOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ReturnOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ReturnOrder(ctx, req.(*TReqReturnOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_WithdrawOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqWithdrawOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).WithdrawOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_WithdrawOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).WithdrawOrder(ctx, req.(*TReqWithdrawOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RenewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TReqRenewTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RenewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RenewTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RenewTask(ctx, req.(*TReqRenewTask))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NService.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "IssueOrder",
			Handler:    _OrderService_IssueOrder_Handler,
		},
		{
			MethodName: "ListHistory",
			Handler:    _OrderService_ListHistory_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _OrderService_ListOrders_Handler,
		},
		{
			MethodName: "ListReturns",
			Handler:    _OrderService_ListReturns_Handler,
		},
		{
			MethodName: "ReturnOrder",
			Handler:    _OrderService_ReturnOrder_Handler,
		},
		{
			MethodName: "WithdrawOrder",
			Handler:    _OrderService_WithdrawOrder_Handler,
		},
		{
			MethodName: "RenewTask",
			Handler:    _OrderService_RenewTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
